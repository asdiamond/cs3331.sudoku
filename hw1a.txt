Due: January 25 (Thursday)

	       +---+---+---+---+---+---+---+---+---+
	       |   | 2 |   ! 6 |   | 9 !   | 5 |   |
	       +---+---+---*---+---+---*---+---+---+
	       |   |   | 1 !   |   |   ! 6 | 2 |   |
	       +---+---+---*---+---+---*---+---+---+
	       |   |   | 8 ! 2 |   | 1 ! 7 |   |   |
	       +===+===+===*===+===+===*===+===+===+
	       | 6 |   |   !   | 2 |   !   |   | 5 |
	       +---+---+---*---+---+---*---+---+---+
	       |   |   | 3 !   |   |   ! 8 |   | 9 |
	       +---+---+---*---+---+---+---+---+---+
	       | 8 |   |   !   | 9 |   !   |   | 7 |
	       +===+===+===*===+===+===+===*===*===+
	       |   |   |   ! 8 |   | 5 !   | 7 |   |
	       +---+---+---*---+---+---*---+---+---+
	       |   | 8 | 6 ! 9 |   |   ! 8 |   |   |
	       +---+---+---*---+---+---*---+---+---+
	       | 9 | 8 |   !   |   |   !   | 1 |   |
	       +---+---+---+---+---+---+---+---+---+

The puzzle can also be played on a grid of 4x4, 16x16, etc. 

1. (50 points) Write a console-based Java application to play a
   simplified version of Sudoku, where a game starts with an empty
   grid. Your application has to meet the following functional and
   non-functional requirements.

   R1. The application shall support two different puzzle (grid)
       sizes, 4x4 and 9x9.

   R2. The application shall show the progress of the game by
       displaying the current configuration of the puzzle -- all the
       numbers placed in the grid. Consider using 2-D ASCII drawing to
       display the grid (see R6 below).

   R3. The application shall detect and prevent the user from placing
       an invalid or inconsistent number in the grid. A number is
       invalid if it is outside the range (1-4 or 1-9). It is
       inconsistent (or conflicting) if it is already placed in the
       same column, row or sub-grid.

   R4. The application shall detect and congratulate it when the user
       completes solving the puzzle.

   R5. The application shall provide a way for the user to quit the
       game, e.g., using a special input value (see R6 below).

   R6. The application shall take all user inputs from System.in and
       display all outputs to System.out.

2. (20 bonus points) Create an initial puzzle configuration, a
   partially filled grid of numbers, using a web service available at
   http://www.cs.utep.edu/cheon/ws/sudoku. Use a simple JSON Java
   library such as JSON-java [2] to parse the response from the web
   service. These bonus points count only if you first complete all
   the requirements for the regular points (R1-R6).

TESTING

   Your code should compile and run correctly with Java 8 or later
   versions.

WHAT AND HOW TO TURN IN

   Submit your program through the Assignment Submission page located
   in the Homework section of the course website. The page will ask
   you to zip your program and upload a single zip file. Your zip file
   should include only a single directory named YourFirstNameLastName
   containing: (a) a runnable jar file and (b) source code files and
   other support files if any. DO NOT INCLUDE BYTECODE (.class)
   FILES. There is a limit on upload file size and the maximum file
   size is 2MB. You should turn in your programs by 11:59 pm on the
   due date.

GRADING

   You will be graded in part on the quality of the design and on how
   clear your code is. Excessively long code will be penalized: don't
   repeat code in multiple places. Your code should be reasonably
   documented and sensibly indented so it is easy to read and
   understand.

   Be sure your name is in the comments in your code.

REFERENCES 

  [1] Wikipedia, Sudoku, https://en.wikipedia.org/wiki/Sudoku.
  [2] JSON, Introducing JSON, http://www.json.org. Use a simple JSON
      library for Java, e.g., JSON-java; for this assignment, you need
      only a few classes: JSONObject, JSONArray and others.
