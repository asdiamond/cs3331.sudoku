           CS 3331 - Advanced Object-Oriented Programming

		      HOMEWORK 4: UI AND DESIGN
		 (File $Date: 2018/03/28 17:11:15 $)

Due: April 12, 2018

This homework may be done in teams of up to three. If you work in
team, you need to fill out the contribution form (see the course
website).

In this assignment, you are to extend your HW2 program to support
several new features including a solver:

R1. Start a game with a partially filled board, typically having at
    least 17 numbers (normally 22-30 numbers). These pre-filled
    numbers cannot be replaced by the player. The initial board
    configuration (filled numbers) should be solvable.

R2. Check whether the current board configuration is solvable.

R3. Solve the current board configuration for the player. 

R4. Improve the user interface by providing a menu and a tool bar to
    perform at least the above three new features. For each menu item,
    provide an icon, a mnemonic and an accelerator. For each tool bar
    button, use an icon and provide a tool tip.

1. (15 points) Design your application and document your design by
   drawing a UML class diagram [Chapter 4 of 1]. You should focus on
   designing those classes that are modified (from your HW2 design) or
   newly introduced; highlight them in your diagram.

   - Your class diagram should show the main components (classes and
     interfaces) and their relationships. 
   - Your model (business logic) classes should be clearly separated 
     from the view/control (UI) classes with no dependencies [2].
   - For each class in your diagram, define key (public) operations
     to show its roles or responsibilities in your application.
   - For each association (aggregate and composite), include at least
     a label, multiplicities and navigation directions.
   - You should provide a short, textual description of each class 
     appearing in your class diagram.

3. (85 points) Code your design.

   For R3 above, use the Strategy design pattern to support a family
   of solving algorithms; however, you need to code only one
   algorithm.
    
   For R4, use JMenuBar and JToolBar; refer to the following two
   online documents:

   - "How to use menus" available from https://docs.oracle.com/
      javase/tutorial/uiswing/components/menu.html
   - "How to use tool bars" available from https://docs.oracle.com/
      javase/tutorial/uiswing/components/toolbar.html

4. (Bonus points) Introduce additional interesting features, e.g.,
   (5 pts) Enabling/disabling number buttons based on the current 
           square selection
   (10 pts) Displaying permitted numbers for empty squares
   (15 pts) Undoing/redoing placing numbers, removing numbers, etc.

HINTS
   
   Reuse your HW2 design and code as much as possible by defining HW4
   classes as subclasses of HW2. For this, you may need to refactor
   HW2 classes to open up their features or make them extensible.

TESTING

   Your code should compile and run correctly under Java 8 or later
   versions.

WHAT AND HOW TO TURN IN

   You should submit hard copies of your UML diagrams along with
   accompanying documents before the class on the due date. Your hard
   copy submission should include:

   - design.doc (UML class diagram along with descriptions)
   - contribution-form.docx (if done in team)
   - screenshot of Git commits (optional if done individually)

   You should submit your program through the Assignment Submission
   page found in the Homework page of the course website. You should
   submit a single zip file that contains:

   - hw4.jar, a runnable jar containing bytecode and support files 
     (e.g., images and audio clips)
   - src directory of source code files
   
   The submission page will ask you to zip your program and upload a
   single zip file. Your zip file should include only a single
   directory named YourFirstNameLastName containing all your source
   code files and other support files needed to compile and run your
   program. DO NOT INCLUDE BYTECODE (.class) FILES. There is a limit
   on upload file size and the maximum file size is 2MB. You should
   turn in your programs by 11:59 pm on the due date.

GRADING

   You will be graded on the quality of the design and how clear your
   code is. Excessively long code will be penalized: don't repeat code
   in multiple places. Your code should be reasonably documented and
   sensibly indented so it is easy to read and understand.

   Be sure your name is in the comments in your code.

REFERENCES 

   [1] Martina Seidl, et al., UML@Classroom: An Introduction to
       Object-Oriented Modeling, Springer, 2015. Free ebook through
       UTEP library.

   [2] Holger Gast, How to Use Objects, Addison-Wesley, 2016.
       Sections 9.1 and 9.2. Ebook available from UTEP library.
